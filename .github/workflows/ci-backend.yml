name: Backend CI

on:
  push:
    branches: [ main, testing-branch ]
    paths:
      - "backend/**"
      - ".github/workflows/ci-backend.yml"
  pull_request:
    branches: [ main, testing-branch ]
    paths:
      - "backend/**"
      - ".github/workflows/ci-backend.yml"
  workflow_dispatch:
    inputs:
      extra_args:
        description: "Extra pytest/unittest args (optional)"
        required: false
        default: ""
  workflow_call:
    inputs:
      extra_args:
        required: false
        type: string
        default: ""

permissions:
  contents: read

concurrency:
  group: backend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    env:
      PYTHONUNBUFFERED: "1"
      SCAPELAB_TESTING: "1"
      DISABLE_STARTUP_DB_CONNECT: "1"
      SQLAZURECONNSTR_DefaultConnection: "Driver={ODBC Driver 18 for SQL Server};Server=localhost;Database=fake;Uid=fake;Pwd=fake;"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Prime .env to avoid accidental prod loads
        run: |
          touch .env
          echo "SCAPELAB_TESTING=1" >> .env
          echo "DISABLE_STARTUP_DB_CONNECT=1" >> .env

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('backend/requirements*.txt', 'backend/pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install system deps if pyodbc is required
        shell: bash
        run: |
          if ls requirements*.txt >/dev/null 2>&1 && grep -Eqi '^\s*pyodbc([<>=].*)?$' requirements*.txt; then
            sudo apt-get update
            sudo apt-get install -y unixodbc-dev
          fi

      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi

      - name: Show test tools
        run: |
          python -c "import importlib.util as u; print('pytest installed?', u.find_spec('pytest') is not None)"

      - name: Run tests
        shell: bash
        run: |
          set -euo pipefail
          EXTRA_ARGS="${{ inputs.extra_args || github.event.inputs.extra_args || '' }}"

          # Is pytest installed?
          if python -c "import importlib.util as u, sys; sys.exit(0 if u.find_spec('pytest') else 1)"; then
            have_pytest=1
          else
            have_pytest=0
          fi

          # Any pytest-style tests present?
          has_pytest_tests=$(find . -path ./venv -prune -o -name "test_*.py" -print -quit | wc -l)

          if [ "$have_pytest" -eq 1 ] && [ "$has_pytest_tests" -gt 0 ]; then
            echo "Running pytest"
            if ! pytest -q $EXTRA_ARGS; then pytest -vv $EXTRA_ARGS; fi
            exit 0
          fi

          if [ -d "app/testing" ]; then
            echo "Running unittest discovery"
            python -m unittest discover -s app/testing -p "test_*.py" $EXTRA_ARGS
            exit 0
          fi

          if [ -f "app/testing/UnitTest.py" ]; then
            echo "Running legacy UnitTest.py"
            python app/testing/UnitTest.py $EXTRA_ARGS
            exit 0
          fi

          echo "No backend tests found. Failing to avoid false green."
          exit 1
