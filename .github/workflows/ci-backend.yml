name: Backend CI

on:
  push:
    branches: [ main, testing-branch ]
    paths:
      - "backend/**"
      - ".github/workflows/ci-backend.yml"
  pull_request:
    branches: [ main, testing-branch ]
    paths:
      - "backend/**"
      - ".github/workflows/ci-backend.yml"
  workflow_dispatch:
    inputs:
      extra_args:
        description: "Extra pytest/unittest args (optional)"
        required: false
        default: ""
      allow_empty:
        description: "Do not fail if no tests are collected"
        required: false
        default: "false"
  workflow_call:
    inputs:
      extra_args:
        required: false
        type: string
        default: ""
      allow_empty:
        required: false
        type: string
        default: "false"

permissions:
  contents: read

concurrency:
  group: backend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    env:
      # Guardrails so the app never tries real DB in CI
      PYTHONUNBUFFERED: "1"
      SCAPELAB_TESTING: "1"
      DISABLE_STARTUP_DB_CONNECT: "1"
      SQLAZURECONNSTR_DefaultConnection: "Driver={ODBC Driver 18 for SQL Server};Server=localhost;Database=fake;Uid=fake;Pwd=fake;"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Prime .env (extra defense against prod loads)
        run: |
          touch .env
          echo "SCAPELAB_TESTING=1" >> .env
          echo "DISABLE_STARTUP_DB_CONNECT=1" >> .env

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('backend/requirements*.txt', 'backend/pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install system deps if pyodbc is required
        shell: bash
        run: |
          if ls requirements*.txt >/dev/null 2>&1 && grep -Eqi '^\s*pyodbc([<>=].*)?$' requirements*.txt; then
            sudo apt-get update
            sudo apt-get install -y unixodbc-dev
          fi

      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          [ -f requirements.txt ] && pip install -r requirements.txt
          [ -f requirements-dev.txt ] && pip install -r requirements-dev.txt || true

      - name: Install test deps (pytest + async + httpx client)
        run: |
          pip install pytest pytest-asyncio httpx

      - name: Run tests (pytest preferred, unittest fallback)
        shell: bash
        run: |
          set -euo pipefail
          EXTRA_ARGS="${{ inputs.extra_args || github.event.inputs.extra_args || '' }}"
          ALLOW_EMPTY="${{ inputs.allow_empty || github.event.inputs.allow_empty || 'false' }}"

          # Try pytest first (will discover unittest suites too)
          set +e
          pytest -q $EXTRA_ARGS
          rc=$?
          set -e

          # Pytest exit code 5 means "no tests collected"
          if [ "$rc" -eq 5 ]; then
            if [ "$ALLOW_EMPTY" = "true" ]; then
              echo "No tests collected (pytest rc=5), allow_empty=true — exiting 0."
              exit 0
            fi
            echo "No tests collected by pytest — trying unittest discovery..."
            # Unittest discovery across common roots/patterns
            found=0
            for root in backend/tests backend/app/testing app/testing; do
              for pat in "test_*.py" "*_test.py" "*UnitTest.py"; do
                if [ -d "$root" ] && find "$root" -type f -name "$pat" -print -quit | grep -q .; then
                  echo "unittest discover: root=$root pattern=$pat"
                  python -m unittest discover -s "$root" -p "$pat" $EXTRA_ARGS
                  found=1
                fi
              done
            done
            if [ "$found" -eq 0 ]; then
              echo "No unittest tests found either."
              exit 1
            fi
            exit 0
          fi

          # If pytest ran and failed with a real failure code, propagate it
          exit "$rc"
