name: Backend CI

on:
  push:
    branches: [ main, testing-branch ]
    paths:
      - "backend/**"
      - ".github/workflows/ci-backend.yml"
  pull_request:
    branches: [ main, testing-branch ]
    paths:
      - "backend/**"
      - ".github/workflows/ci-backend.yml"

permissions:
  contents: read

concurrency:
  group: backend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    env:
      PYTHONUNBUFFERED: "1"
      SCAPELAB_TESTING: "1"
      DISABLE_STARTUP_DB_CONNECT: "1"
      # Dummy connection string; we never actually connect in CI
      SQLAZURECONNSTR_DefaultConnection: "Driver={ODBC Driver 18 for SQL Server};Server=localhost;Database=fake;Uid=fake;Pwd=fake;"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Prime .env to avoid accidental prod loads
        run: |
          touch .env
          echo "SCAPELAB_TESTING=1" >> .env
          echo "DISABLE_STARTUP_DB_CONNECT=1" >> .env

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('backend/requirements*.txt', 'backend/pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install system deps if pyodbc is required
        shell: bash
        run: |
          if grep -Eqi '^\s*pyodbc([<>=].*)?$' requirements*.txt 2>/dev/null; then
            sudo apt-get update
            sudo apt-get install -y unixodbc-dev
          fi

      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi

      - name: Show test tools
        run: |
          python - <<'PY'
import pkgutil, sys
print("pytest installed? ", bool(pkgutil.find_loader("pytest")))
PY

      - name: Run tests
        shell: bash
        run: |
          set -euo pipefail

          have_pytest=0
          python - <<'PY' || true
import pkgutil, sys
sys.exit(0 if pkgutil.find_loader("pytest") else 1)
PY
          if [ $? -eq 0 ]; then have_pytest=1; fi

          # Detect pytest-style tests
          has_pytest_tests=$(find . -path ./venv -prune -o -name "test_*.py" -print -quit | wc -l)

          if [ "$have_pytest" -eq 1 ] && [ "$has_pytest_tests" -gt 0 ]; then
            echo "Running pytest"
            pytest -q || pytest -vv
            exit 0
          fi

          # Fallback: unittest discovery
          if [ -d "app/testing" ]; then
            echo "Running unittest discovery"
            python -m unittest discover -s app/testing -p "test_*.py"
            exit 0
          fi

          # Legacy single test runner
          if [ -f "app/testing/UnitTest.py" ]; then
            echo "Running legacy UnitTest.py"
            python app/testing/UnitTest.py
            exit 0
          fi

          echo "No backend tests found (pytest/unittest/legacy). Failing the job to avoid false green."
          exit 1
